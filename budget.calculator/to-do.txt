ПЛАН УРОКОВ

1. УРОК. Модули. Прослушка отправки формы

1) Создаем файлы под каждый модуль
2) В контроллер передаем модель и шаблон
3) В контроллере обрабатываем submit формы и запускаем ф-ю ctrlAddItem()

2. УРОК. Получение данных из формы

1) Переносим селекторы в VIEW контроллер, возвращаем их оттуда
2) В контроллере получаем селекторы и записываем в переменную DOM
3) Во view создаем и возвращаем функцию getInput для сбора и передачи данных с формы
4) В контроллере в ф-ии ctrlAddItem обращаемся к uiCtrl.getInput(); и получаем все данные из формы

3. УРОК. Скрипт для тестовых данных

1) Пишем модуль для подстановки тестовых данных в форму, чтобы не заоплнять ее каждый раз вручную для тестирования

4. УРОК. Правки контроллера. Прослушка событий в отдельной функции

1) В контроллере создаем отдельную функцию setupEventListeners по прослушке событий и запуску других функций
2) Возвращаем ее через return как метод init и далее запускаем его от контроллера
3) Запускаем controller.init();

5. УРОК. Структура данных в модели

1) Создали структуру данных в модели
2) объект data под данные приложения
3) функции конструкторы под создание раходов и доходов

6. УРОК. Добавление записей в модель

1) В модели создаем ф-ю для создания новых "записей" addItem()
2) Она заполняет нашу структуру данных, расходом или доходом
3) По type определяем тип записи +/-, рассчитываем ID
4) В контроллере делаем пункт 2, добавляем полученные данные из input в модель

7. УРОК. Вывод записей в разметку

1) Начинаем работать с отображением заисей в таблицах
2) В UI выносим ф-ю getInput из return
3) В UI добавляем метод который будет добавлять новую запись в разметку
4) Вызываем этот метод в контроллере в 3-ем пункте
5) Оборачиваю тестовые функции в модуль и ивызываю его init после добавления дагнных в контроллере

8. УРОК. Очистка полей формы после ввода

1) В view создание функции clearFields для очистки полей формы
2) Запуск ф-ии clearFields в контроллере после добавления новых данных

9. УРОК. Проверка на пустые поля

1) Правим контроллер добавляя условие на непустые поля

--------------------------------- 1-я часть готова! ------------------------------------

----------------------------------------------
10. УРОК - КОНТРОЛЛЕР И МОДЕЛЬ. Расчет общих доходов, расходов и % общих расходов от доходов.
----------------------------------------------

1) Создадим заготовку для ф-ии updateBudget в контроллере
2) Поставим ее выход в добавление новой записи
3) В Модели создаем calculateBudget() в ней считаем все доходы, все расходы, общий бюджет % и записываем их в data объект
4) Создаем ф-ю calculateTotalSum которая будет возвращать сумму для расходов и доходов
5) Вношу правки в Модель в добавление новых пунктов parseFloat(value)
6) В объекте data добавляем поля для budget и percentage
7) В calculateBudget рассчитываем бюджет и % и записываем их в data

----------------------------------------------
11. УРОК - Обновление бюджета в UI
----------------------------------------------

1) Найдем селекторы по которым надо будет вносить изменени в разметку и запишем их в DOM strings
2) В модели создаю метод budgetCtrl.getBudget() который будет возвращать объект с бюджетом
3) В контроллере запускаю его и получаю из него объект с бюджетом
4) В контроллере запускаю ф-ю из UI которая будет обновлять в разметке данные по бюджету uiCtrl.updateBudget();
5) Создаю и описываю метод uiCtrl.updateBudget();
6) Также запускаем метод uiCtrl.updateBudget(); при инициализации приложения передавая в него объект нужной структуры но с нолями и правлю значения в разметке на ноли


----------------------------------------------
12. УРОК - Удаление записей. Прослушка и сбор данных с шаблона
----------------------------------------------

1) Создаем budgetTable в DOMstrings
2) Отслеживаем клик по budgetTable и запускаем ф-ю ctrlDeleteItem
3) В ф-ии ctrlDeleteItem проверяем что кликнули по кнопке удалить или внутри неё и находим ID записи в которой она находится
4) Вносим  правки в шаблон чтобы id был указан как inc-0 или exp-0 чтобы тип соответствовал type
5) Разбиваем полученный ID на тип и на номер ID

----------------------------------------------
13. УРОК - Удаление записей. Удаление из модели
----------------------------------------------

1) Запускаем в контроллере ф-ю budgetCtrl.deleteItem(type, id); и идем создавать и описывать ее в модели
2) КОНТРОЛЛЕР когда получаем ID из разметки не забыть сделать ID = parseInt(splitID[1]);
3) В модели сначала через ID находим index записи которую надо удалить
4) После зная индекс удаляем нужную запись

----------------------------------------------
14. УРОК - Удаление записей. Удаление из шаблона
----------------------------------------------

1) Запускаем в контроллере метод uiCtrl.deleteListItem(itemID); и создаем его в шаблоне
2) В конце после процедуры удаления обновляем бюджет updateBudget();

--------------------------------- 2-я часть готова! ------------------------------------

----------------------------------------------
15. УРОК - Обновление процентов для записей с расходами. Часть 1. Модель
----------------------------------------------

1) В контроллере после добавления или удаления записей запускаем ф-ю updatePercentages();
2) Записываем список действий которые надо сделать для обновления процентов в ф-ии updatePercentages
3) Для Expense конструктора создаем новое свойство для учета процентов, ставим его на "-1"
4) Для Expense объектов создаем метод Expense.prototype.calcPercentage который считает процент для конкретного объекта
Также создадим метод Expense.prototype.getPercentage который будет возвращать значение % для текущей записи.

5) В Модели создаем публичный метод calculatePercentages для запуска пересчета процентов у всех объектов типа Expense

6) В контроллере в ф-ии updatePercentages запускаем метод budgetCtrl.calculatePercentages(); для пересчета всех процентов

----

В шаблоне для обновления процентов у записей нам необходимо знать у какой записи на какое значение надо обновить процент. Нам надо знать конкретные записи и проценты. У записей есть ID. Проценты записаны в структуре данных в объекте data.

7) В Модели создаем публичный метод getAllIdsAndPercentages который будет возвращать массив из элементов. Каждый элемент массива будет являться массивом и иметь в себе два элемента, ID зваписи и процентное значение.

8) Остановимся на том что выведем в консоль полученный массив с ID и процентами. Обновлением разметки займемся в следующем уроке.


----------------------------------------------
16. УРОК - Обновление процентов для записей с расходами. Часть 2. Шаблон
----------------------------------------------

1)  Создаю function updateItemsPercentages(items) в ШАБЛОНЕ и запускаю ее в контроллере.
2) Поправил шаблон расходных записей добавив класс item__percent к ячейке с процентами



----------------------------------------------
17. УРОК - Форматирование значений
----------------------------------------------

В ШАБЛОНЕ пишу ф-ю formatNumber и применяю её перед вставкой цифр в приложение в шаблоны записей и в общий бюджет
displayBudget

Примеры преобразования:
155.564654 => 155.56
12758 => 12,758.00
123456789 => 123,456,789.00

Вызываем formatNumber в выводе value в записях и в выводе значений бюджета в шапке

----------------------------------------------
18. УРОК - Отображение года и месяца
----------------------------------------------

1) Создаю в DOMstrings monthLabel: "#month", yearLabel: "#year"
2) В шаблоне создаем ф-ю displayMonth()
3) Запускаем  displayMonth() в контроллере в init();